# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:16:59+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional
from uuid import UUID

from pydantic import BaseModel, Field, constr


class Examination(BaseModel):
    month: constr(min_length=1) = Field(..., examples=['MARCH'])
    name: constr(min_length=1) = Field(
        ..., examples=['SENION SCHOOL CERTIFICATE EXAMINATION']
    )
    year: constr(min_length=1) = Field(..., examples=[2019])


class Subject(BaseModel):
    code: constr(min_length=1) = Field(..., examples=[30])
    gp: str = Field(..., examples=[''])
    gpMax: str = Field(..., examples=[''])
    grade: constr(min_length=1) = Field(..., examples=['A2'])
    marksMax: int = Field(..., examples=[''])
    marksMaxPractical: int = Field(..., examples=[''])
    marksMaxTheory: int = Field(..., examples=[''])
    marksPractical: int = Field(..., examples=[17])
    marksTheory: int = Field(..., examples=[70])
    marksTotal: int = Field(..., examples=[87])
    name: constr(min_length=1) = Field(..., examples=['ECONOMICS'])


class Performance(BaseModel):
    Subjects: List[Subject]
    cgpa: str = Field(..., examples=[''])
    cgpaMax: str = Field(..., examples=[''])
    grade: str = Field(..., examples=[''])
    marksMax: str = Field(..., examples=[''])
    marksTotal: str = Field(..., examples=[''])
    percentage: str = Field(..., examples=[''])
    result: constr(min_length=1) = Field(..., examples=['PASS'])
    resultDate: constr(min_length=1) = Field(..., examples=['02-05-2019'])
    updateDate: str = Field(..., examples=[''])


class School(BaseModel):
    code: constr(min_length=1) = Field(..., examples=[20020])
    name: constr(min_length=1) = Field(..., examples=['DELHI PUBLIC SCHOOL GURGAON'])


class CertificateData(BaseModel):
    Examination_1: Examination = Field(..., alias='Examination')
    Performance_1: Performance = Field(..., alias='Performance')
    School_1: School = Field(..., alias='School')


class Address(BaseModel):
    country: constr(min_length=1) = Field(..., examples=['IN'])
    district: str = Field(..., examples=[''])
    house: str = Field(..., examples=[''])
    landmark: str = Field(..., examples=[''])
    line1: str = Field(..., examples=[''])
    line2: str = Field(..., examples=[''])
    locality: str = Field(..., examples=[''])
    pin: str = Field(..., examples=[''])
    state: str = Field(..., examples=[''])
    type: str = Field(..., examples=[''])
    vtc: str = Field(..., examples=[''])


class Organization(BaseModel):
    Address_1: Address = Field(..., alias='Address')
    code: str = Field(..., examples=[''])
    name: constr(min_length=1) = Field(
        ..., examples=['Central Board of Secondary Education']
    )
    tin: str = Field(..., examples=[''])
    type: constr(min_length=1) = Field(..., examples=['CG'])
    uid: str = Field(..., examples=[''])


class IssuedBy(BaseModel):
    Organization_1: Organization = Field(..., alias='Organization')


class Address1(BaseModel):
    country: constr(min_length=1) = Field(..., examples=['IN'])
    district: str = Field(..., examples=[''])
    house: str = Field(..., examples=[''])
    landmark: str = Field(..., examples=[None])
    line1: str = Field(..., examples=[''])
    line2: str = Field(..., examples=[''])
    locality: str = Field(..., examples=[''])
    pin: str = Field(..., examples=[''])
    state: str = Field(..., examples=[''])
    type: constr(min_length=1) = Field(..., examples=['permanent'])
    vtc: str = Field(..., examples=[''])


class Photo(BaseModel):
    format: str


class Person(BaseModel):
    Address: Address1
    Photo_1: Photo = Field(..., alias='Photo')
    category: constr(min_length=1) = Field(..., examples=['SC'])
    disabilityStatus: str = Field(..., examples=[''])
    dob: constr(min_length=1) = Field(..., examples=['01-10-1988'])
    email: str = Field(..., examples=[''])
    gender: str = Field(..., examples=[''])
    maritalStatus: str = Field(..., examples=[''])
    motherName: constr(min_length=1) = Field(..., examples=['SUNITA DEVI'])
    name: constr(min_length=1) = Field(..., examples=['ANAND KUMAR'])
    phone: str = Field(..., examples=[''])
    religion: str = Field(..., examples=[''])
    swd: constr(min_length=1) = Field(..., examples=['PRAMOD KUMAR'])
    swdIndicator: constr(min_length=1) = Field(..., examples=['S'])
    title: str = Field(..., examples=[''])
    uid: str = Field(..., examples=[''])


class IssuedTo(BaseModel):
    Person_1: Person = Field(..., alias='Person')


class AcademicCertificateSchema(BaseModel):
    CertificateData_1: CertificateData = Field(..., alias='CertificateData')
    IssuedBy_1: IssuedBy = Field(..., alias='IssuedBy')
    IssuedTo_1: IssuedTo = Field(..., alias='IssuedTo')
    issueDate: str = Field(..., examples=[' '])
    issuedAt: str = Field(..., examples=[''])
    language: constr(min_length=1) = Field(..., examples=[99])
    name: constr(min_length=1) = Field(..., examples=['Secondary School Certificate'])
    number: int = Field(..., examples=[1100044])
    status: constr(min_length=1) = Field(..., examples=['A'])
    type: str = Field(..., examples=['SSCER'])
    validFromDate: str = Field(..., examples=[' '])


class Data(BaseModel):
    id: constr(min_length=1)


class DataConsumer(BaseModel):
    id: constr(min_length=1)


class DataProvider(BaseModel):
    id: constr(min_length=1)


class DateRange(BaseModel):
    from_: datetime = Field(
        ...,
        alias='from',
        description='Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ',
    )
    to: datetime = Field(
        ...,
        description='Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ',
    )


class Frequency(BaseModel):
    repeats: float
    unit: constr(min_length=1)
    value: float


class Permission(BaseModel):
    access: constr(min_length=1)
    dateRange: DateRange
    frequency: Frequency


class Purpose(BaseModel):
    description: constr(min_length=1)


class User(BaseModel):
    email: constr(min_length=1)
    idNumber: constr(min_length=1)
    idType: constr(min_length=1)
    mobile: constr(min_length=1)


class Consent(BaseModel):
    consentId: UUID = Field(
        ...,
        description='A unique consent id in UUID format.',
        examples=['ea9c43aa-7f5a-4bf3-a0be-e1caa24737ba'],
    )
    data: Data
    dataConsumer: DataConsumer
    dataProvider: DataProvider
    permission: Permission
    purpose: Purpose
    timestamp: datetime = Field(
        ...,
        description='Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ',
    )
    user: User


class Signature(BaseModel):
    signature: str


class ConsentArtifactSchema(BaseModel):
    consent: Consent
    signature: Signature


class CertificateParameters(BaseModel):
    INSCODE: str = Field(..., description='INSCODE', examples=['99999999'])
    POLNO: str = Field(..., description='POLNO', examples=['215700/31/2020/211'])
    STARTDT: str = Field(..., description='STARTDT', examples=['13-APR-2019'])


class Format(Enum):
    pdf = 'pdf'


class CripcCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class CripcCertificatePostResponse(BaseModel):
    error: Optional[Error] = None
    errorDescription: Optional[ErrorDescription] = None


class Error1(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription1(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class CripcCertificatePostResponse1(BaseModel):
    error: Optional[Error1] = None
    errorDescription: Optional[ErrorDescription1] = None


class Error2(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription2(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class CripcCertificatePostResponse2(BaseModel):
    error: Optional[Error2] = None
    errorDescription: Optional[ErrorDescription2] = None


class Error3(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription3(Enum):
    Internal_server_error = 'Internal server error'


class CripcCertificatePostResponse3(BaseModel):
    error: Optional[Error3] = None
    errorDescription: Optional[ErrorDescription3] = None


class Error4(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription4(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class CripcCertificatePostResponse4(BaseModel):
    error: Optional[Error4] = None
    errorDescription: Optional[ErrorDescription4] = None


class Error5(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription5(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class CripcCertificatePostResponse5(BaseModel):
    error: Optional[Error5] = None
    errorDescription: Optional[ErrorDescription5] = None


class Error6(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription6(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class CripcCertificatePostResponse6(BaseModel):
    error: Optional[Error6] = None
    errorDescription: Optional[ErrorDescription6] = None


class CvipcCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error7(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription7(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class CvipcCertificatePostResponse(BaseModel):
    error: Optional[Error7] = None
    errorDescription: Optional[ErrorDescription7] = None


class Error8(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription8(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class CvipcCertificatePostResponse1(BaseModel):
    error: Optional[Error8] = None
    errorDescription: Optional[ErrorDescription8] = None


class Error9(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription9(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class CvipcCertificatePostResponse2(BaseModel):
    error: Optional[Error9] = None
    errorDescription: Optional[ErrorDescription9] = None


class Error10(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription10(Enum):
    Internal_server_error = 'Internal server error'


class CvipcCertificatePostResponse3(BaseModel):
    error: Optional[Error10] = None
    errorDescription: Optional[ErrorDescription10] = None


class Error11(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription11(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class CvipcCertificatePostResponse4(BaseModel):
    error: Optional[Error11] = None
    errorDescription: Optional[ErrorDescription11] = None


class Error12(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription12(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class CvipcCertificatePostResponse5(BaseModel):
    error: Optional[Error12] = None
    errorDescription: Optional[ErrorDescription12] = None


class Error13(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription13(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class CvipcCertificatePostResponse6(BaseModel):
    error: Optional[Error13] = None
    errorDescription: Optional[ErrorDescription13] = None


class EgipcCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error14(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription14(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class EgipcCertificatePostResponse(BaseModel):
    error: Optional[Error14] = None
    errorDescription: Optional[ErrorDescription14] = None


class Error15(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription15(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class EgipcCertificatePostResponse1(BaseModel):
    error: Optional[Error15] = None
    errorDescription: Optional[ErrorDescription15] = None


class Error16(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription16(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class EgipcCertificatePostResponse2(BaseModel):
    error: Optional[Error16] = None
    errorDescription: Optional[ErrorDescription16] = None


class Error17(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription17(Enum):
    Internal_server_error = 'Internal server error'


class EgipcCertificatePostResponse3(BaseModel):
    error: Optional[Error17] = None
    errorDescription: Optional[ErrorDescription17] = None


class Error18(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription18(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class EgipcCertificatePostResponse4(BaseModel):
    error: Optional[Error18] = None
    errorDescription: Optional[ErrorDescription18] = None


class Error19(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription19(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class EgipcCertificatePostResponse5(BaseModel):
    error: Optional[Error19] = None
    errorDescription: Optional[ErrorDescription19] = None


class Error20(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription20(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class EgipcCertificatePostResponse6(BaseModel):
    error: Optional[Error20] = None
    errorDescription: Optional[ErrorDescription20] = None


class HlipcCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error21(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription21(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class HlipcCertificatePostResponse(BaseModel):
    error: Optional[Error21] = None
    errorDescription: Optional[ErrorDescription21] = None


class Error22(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription22(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class HlipcCertificatePostResponse1(BaseModel):
    error: Optional[Error22] = None
    errorDescription: Optional[ErrorDescription22] = None


class Error23(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription23(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class HlipcCertificatePostResponse2(BaseModel):
    error: Optional[Error23] = None
    errorDescription: Optional[ErrorDescription23] = None


class Error24(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription24(Enum):
    Internal_server_error = 'Internal server error'


class HlipcCertificatePostResponse3(BaseModel):
    error: Optional[Error24] = None
    errorDescription: Optional[ErrorDescription24] = None


class Error25(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription25(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class HlipcCertificatePostResponse4(BaseModel):
    error: Optional[Error25] = None
    errorDescription: Optional[ErrorDescription25] = None


class Error26(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription26(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class HlipcCertificatePostResponse5(BaseModel):
    error: Optional[Error26] = None
    errorDescription: Optional[ErrorDescription26] = None


class Error27(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription27(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class HlipcCertificatePostResponse6(BaseModel):
    error: Optional[Error27] = None
    errorDescription: Optional[ErrorDescription27] = None


class HmipcCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error28(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription28(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class HmipcCertificatePostResponse(BaseModel):
    error: Optional[Error28] = None
    errorDescription: Optional[ErrorDescription28] = None


class Error29(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription29(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class HmipcCertificatePostResponse1(BaseModel):
    error: Optional[Error29] = None
    errorDescription: Optional[ErrorDescription29] = None


class Error30(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription30(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class HmipcCertificatePostResponse2(BaseModel):
    error: Optional[Error30] = None
    errorDescription: Optional[ErrorDescription30] = None


class Error31(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription31(Enum):
    Internal_server_error = 'Internal server error'


class HmipcCertificatePostResponse3(BaseModel):
    error: Optional[Error31] = None
    errorDescription: Optional[ErrorDescription31] = None


class Error32(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription32(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class HmipcCertificatePostResponse4(BaseModel):
    error: Optional[Error32] = None
    errorDescription: Optional[ErrorDescription32] = None


class Error33(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription33(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class HmipcCertificatePostResponse5(BaseModel):
    error: Optional[Error33] = None
    errorDescription: Optional[ErrorDescription33] = None


class Error34(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription34(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class HmipcCertificatePostResponse6(BaseModel):
    error: Optional[Error34] = None
    errorDescription: Optional[ErrorDescription34] = None


class MripcCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error35(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription35(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class MripcCertificatePostResponse(BaseModel):
    error: Optional[Error35] = None
    errorDescription: Optional[ErrorDescription35] = None


class Error36(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription36(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class MripcCertificatePostResponse1(BaseModel):
    error: Optional[Error36] = None
    errorDescription: Optional[ErrorDescription36] = None


class Error37(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription37(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class MripcCertificatePostResponse2(BaseModel):
    error: Optional[Error37] = None
    errorDescription: Optional[ErrorDescription37] = None


class Error38(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription38(Enum):
    Internal_server_error = 'Internal server error'


class MripcCertificatePostResponse3(BaseModel):
    error: Optional[Error38] = None
    errorDescription: Optional[ErrorDescription38] = None


class Error39(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription39(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class MripcCertificatePostResponse4(BaseModel):
    error: Optional[Error39] = None
    errorDescription: Optional[ErrorDescription39] = None


class Error40(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription40(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class MripcCertificatePostResponse5(BaseModel):
    error: Optional[Error40] = None
    errorDescription: Optional[ErrorDescription40] = None


class Error41(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription41(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class MripcCertificatePostResponse6(BaseModel):
    error: Optional[Error41] = None
    errorDescription: Optional[ErrorDescription41] = None


class PodocCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error42(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription42(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class PodocCertificatePostResponse(BaseModel):
    error: Optional[Error42] = None
    errorDescription: Optional[ErrorDescription42] = None


class Error43(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription43(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class PodocCertificatePostResponse1(BaseModel):
    error: Optional[Error43] = None
    errorDescription: Optional[ErrorDescription43] = None


class Error44(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription44(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class PodocCertificatePostResponse2(BaseModel):
    error: Optional[Error44] = None
    errorDescription: Optional[ErrorDescription44] = None


class Error45(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription45(Enum):
    Internal_server_error = 'Internal server error'


class PodocCertificatePostResponse3(BaseModel):
    error: Optional[Error45] = None
    errorDescription: Optional[ErrorDescription45] = None


class Error46(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription46(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class PodocCertificatePostResponse4(BaseModel):
    error: Optional[Error46] = None
    errorDescription: Optional[ErrorDescription46] = None


class Error47(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription47(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class PodocCertificatePostResponse5(BaseModel):
    error: Optional[Error47] = None
    errorDescription: Optional[ErrorDescription47] = None


class Error48(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription48(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class PodocCertificatePostResponse6(BaseModel):
    error: Optional[Error48] = None
    errorDescription: Optional[ErrorDescription48] = None


class PripcCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error49(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription49(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class PripcCertificatePostResponse(BaseModel):
    error: Optional[Error49] = None
    errorDescription: Optional[ErrorDescription49] = None


class Error50(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription50(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class PripcCertificatePostResponse1(BaseModel):
    error: Optional[Error50] = None
    errorDescription: Optional[ErrorDescription50] = None


class Error51(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription51(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class PripcCertificatePostResponse2(BaseModel):
    error: Optional[Error51] = None
    errorDescription: Optional[ErrorDescription51] = None


class Error52(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription52(Enum):
    Internal_server_error = 'Internal server error'


class PripcCertificatePostResponse3(BaseModel):
    error: Optional[Error52] = None
    errorDescription: Optional[ErrorDescription52] = None


class Error53(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription53(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class PripcCertificatePostResponse4(BaseModel):
    error: Optional[Error53] = None
    errorDescription: Optional[ErrorDescription53] = None


class Error54(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription54(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class PripcCertificatePostResponse5(BaseModel):
    error: Optional[Error54] = None
    errorDescription: Optional[ErrorDescription54] = None


class Error55(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription55(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class PripcCertificatePostResponse6(BaseModel):
    error: Optional[Error55] = None
    errorDescription: Optional[ErrorDescription55] = None


class TripcCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error56(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription56(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class TripcCertificatePostResponse(BaseModel):
    error: Optional[Error56] = None
    errorDescription: Optional[ErrorDescription56] = None


class Error57(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription57(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class TripcCertificatePostResponse1(BaseModel):
    error: Optional[Error57] = None
    errorDescription: Optional[ErrorDescription57] = None


class Error58(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription58(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class TripcCertificatePostResponse2(BaseModel):
    error: Optional[Error58] = None
    errorDescription: Optional[ErrorDescription58] = None


class Error59(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription59(Enum):
    Internal_server_error = 'Internal server error'


class TripcCertificatePostResponse3(BaseModel):
    error: Optional[Error59] = None
    errorDescription: Optional[ErrorDescription59] = None


class Error60(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription60(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class TripcCertificatePostResponse4(BaseModel):
    error: Optional[Error60] = None
    errorDescription: Optional[ErrorDescription60] = None


class Error61(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription61(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class TripcCertificatePostResponse5(BaseModel):
    error: Optional[Error61] = None
    errorDescription: Optional[ErrorDescription61] = None


class Error62(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription62(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class TripcCertificatePostResponse6(BaseModel):
    error: Optional[Error62] = None
    errorDescription: Optional[ErrorDescription62] = None


class TwipcCertificatePostRequest(BaseModel):
    certificateParameters: Optional[CertificateParameters] = None
    consentArtifact: Optional[ConsentArtifactSchema] = None
    format: Format = Field(
        ..., description='The format of the certificate in response.'
    )
    txnId: UUID = Field(
        ...,
        description='A unique transaction id for this request in UUID format. It is used for tracking the request.',
        examples=['f7f1469c-29b0-4325-9dfc-c567200a70f7'],
    )


class Error63(Enum):
    missing_parameter = 'missing_parameter'
    invalid_parameter = 'invalid_parameter'
    invalid_format = 'invalid_format'
    invalid_txnid = 'invalid_txnid'
    invalid_consentid = 'invalid_consentid'


class ErrorDescription63(Enum):
    Please_provide_all_mandatory_parameters = 'Please provide all mandatory parameters'
    Bad_request = 'Bad request'
    The_format_parameter_is_invalid = 'The format parameter is invalid'
    The_txnId_parameter_must_be_in_UUID_format = (
        'The txnId parameter must be in UUID format'
    )
    The_consentId_parameter_must_be_in_UUID_format = (
        'The consentId parameter must be in UUID format'
    )


class TwipcCertificatePostResponse(BaseModel):
    error: Optional[Error63] = None
    errorDescription: Optional[ErrorDescription63] = None


class Error64(Enum):
    invalid_authentication = 'invalid_authentication'
    invalid_authorization = 'invalid_authorization'


class ErrorDescription64(Enum):
    Authentication_failed = 'Authentication failed'
    You_are_not_authorized_to_use_this_API = 'You are not authorized to use this API'


class TwipcCertificatePostResponse1(BaseModel):
    error: Optional[Error64] = None
    errorDescription: Optional[ErrorDescription64] = None


class Error65(Enum):
    record_not_found = 'record_not_found'
    url_not_found = 'url_not_found'


class ErrorDescription65(Enum):
    No_record_found = 'No record found'
    Your_API_url_or_path_is_incorrect = 'Your API url or path is incorrect'


class TwipcCertificatePostResponse2(BaseModel):
    error: Optional[Error65] = None
    errorDescription: Optional[ErrorDescription65] = None


class Error66(Enum):
    internal_server_error = 'internal_server_error'


class ErrorDescription66(Enum):
    Internal_server_error = 'Internal server error'


class TwipcCertificatePostResponse3(BaseModel):
    error: Optional[Error66] = None
    errorDescription: Optional[ErrorDescription66] = None


class Error67(Enum):
    bad_gatewy = 'bad_gatewy'


class ErrorDescription67(Enum):
    Publisher_service_returned_an_invalid_response = (
        'Publisher service returned an invalid response'
    )


class TwipcCertificatePostResponse4(BaseModel):
    error: Optional[Error67] = None
    errorDescription: Optional[ErrorDescription67] = None


class Error68(Enum):
    service_unavailable = 'service_unavailable'


class ErrorDescription68(Enum):
    Publisher_service_is_temporarily_unavailable = (
        'Publisher service is temporarily unavailable'
    )


class TwipcCertificatePostResponse5(BaseModel):
    error: Optional[Error68] = None
    errorDescription: Optional[ErrorDescription68] = None


class Error69(Enum):
    gateway_timeout = 'gateway_timeout'


class ErrorDescription69(Enum):
    Publisher_service_did_not_respond_in_time = (
        'Publisher service did not respond in time'
    )


class TwipcCertificatePostResponse6(BaseModel):
    error: Optional[Error69] = None
    errorDescription: Optional[ErrorDescription69] = None
